// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: weatherForecastService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherForecastServiceClient is the client API for WeatherForecastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherForecastServiceClient interface {
	GetForecast(ctx context.Context, in *ForecastInput, opts ...grpc.CallOption) (*ForecastOutput, error)
}

type weatherForecastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherForecastServiceClient(cc grpc.ClientConnInterface) WeatherForecastServiceClient {
	return &weatherForecastServiceClient{cc}
}

func (c *weatherForecastServiceClient) GetForecast(ctx context.Context, in *ForecastInput, opts ...grpc.CallOption) (*ForecastOutput, error) {
	out := new(ForecastOutput)
	err := c.cc.Invoke(ctx, "/WeatherForecastService/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherForecastServiceServer is the server API for WeatherForecastService service.
// All implementations must embed UnimplementedWeatherForecastServiceServer
// for forward compatibility
type WeatherForecastServiceServer interface {
	GetForecast(context.Context, *ForecastInput) (*ForecastOutput, error)
	mustEmbedUnimplementedWeatherForecastServiceServer()
}

// UnimplementedWeatherForecastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherForecastServiceServer struct {
}

func (UnimplementedWeatherForecastServiceServer) GetForecast(context.Context, *ForecastInput) (*ForecastOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedWeatherForecastServiceServer) mustEmbedUnimplementedWeatherForecastServiceServer() {
}

// UnsafeWeatherForecastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherForecastServiceServer will
// result in compilation errors.
type UnsafeWeatherForecastServiceServer interface {
	mustEmbedUnimplementedWeatherForecastServiceServer()
}

func RegisterWeatherForecastServiceServer(s grpc.ServiceRegistrar, srv WeatherForecastServiceServer) {
	s.RegisterService(&WeatherForecastService_ServiceDesc, srv)
}

func _WeatherForecastService_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherForecastServiceServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeatherForecastService/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherForecastServiceServer).GetForecast(ctx, req.(*ForecastInput))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherForecastService_ServiceDesc is the grpc.ServiceDesc for WeatherForecastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherForecastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherForecastService",
	HandlerType: (*WeatherForecastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForecast",
			Handler:    _WeatherForecastService_GetForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weatherForecastService.proto",
}
