// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api_gateway/resources/reviewManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewManagerServiceClient is the client API for ReviewManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewManagerServiceClient interface {
	AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error)
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error)
}

type reviewManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewManagerServiceClient(cc grpc.ClientConnInterface) ReviewManagerServiceClient {
	return &reviewManagerServiceClient{cc}
}

func (c *reviewManagerServiceClient) AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error) {
	out := new(AddReviewResponse)
	err := c.cc.Invoke(ctx, "/it.progetto.progetto_sdcc.proto.ReviewManagerService/addReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewManagerServiceClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error) {
	out := new(GetReviewsResponse)
	err := c.cc.Invoke(ctx, "/it.progetto.progetto_sdcc.proto.ReviewManagerService/getReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewManagerServiceServer is the server API for ReviewManagerService service.
// All implementations must embed UnimplementedReviewManagerServiceServer
// for forward compatibility
type ReviewManagerServiceServer interface {
	AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error)
	GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error)
	mustEmbedUnimplementedReviewManagerServiceServer()
}

// UnimplementedReviewManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewManagerServiceServer struct {
}

func (UnimplementedReviewManagerServiceServer) AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReview not implemented")
}
func (UnimplementedReviewManagerServiceServer) GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedReviewManagerServiceServer) mustEmbedUnimplementedReviewManagerServiceServer() {}

// UnsafeReviewManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewManagerServiceServer will
// result in compilation errors.
type UnsafeReviewManagerServiceServer interface {
	mustEmbedUnimplementedReviewManagerServiceServer()
}

func RegisterReviewManagerServiceServer(s grpc.ServiceRegistrar, srv ReviewManagerServiceServer) {
	s.RegisterService(&ReviewManagerService_ServiceDesc, srv)
}

func _ReviewManagerService_AddReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewManagerServiceServer).AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/it.progetto.progetto_sdcc.proto.ReviewManagerService/addReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewManagerServiceServer).AddReview(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewManagerService_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewManagerServiceServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/it.progetto.progetto_sdcc.proto.ReviewManagerService/getReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewManagerServiceServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewManagerService_ServiceDesc is the grpc.ServiceDesc for ReviewManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "it.progetto.progetto_sdcc.proto.ReviewManagerService",
	HandlerType: (*ReviewManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addReview",
			Handler:    _ReviewManagerService_AddReview_Handler,
		},
		{
			MethodName: "getReviews",
			Handler:    _ReviewManagerService_GetReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_gateway/resources/reviewManager.proto",
}
